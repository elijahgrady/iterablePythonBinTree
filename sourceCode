 class BinaryTree:
     def __init__(self, data, l = None, r = None):
         self.data = data
         self.l = l
         self.r = l

     def __iter__(self, **kwd):
         if self.l is not None:
             yield l
         yield self.data
         if self.r is not None:
             yield r
         else:
             raise StopIteration

     def i__repr__(self):
         return str(self.data)


 Node = BinaryTree

 if __name__=='__main__':
     s = Node(1)
     t = Node(10, s, None)
     tree = BinaryTree(20, None, t)

     for x in (s, t, tree):
         print(x)

     for node in tree:
         print(node)

 #the magic here is that the generator function allows for lazy calculations
 #and hooks the default iterator used by the two for loops in the main method
